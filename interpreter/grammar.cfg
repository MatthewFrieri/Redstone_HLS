#Top down precedence
#A* -> 0 or more A
#A+ -> 1 or more A
#A? -> optional (0 or 1)


program -> declaration* EOF ;
declaration -> varDecl | statement ;
statement -> exprStmt | printStmt | ifStmt | whileStmt | forStmt | block ;

whileStmt -> "while (" expression ")" statement ;
#for (variable; condition; increment) {logic}
forStmt -> "for (" ( varDecl | exprStmt ";" ) expression? ";" expression? ")" statement ;
ifStmt -> "if (" expression ")" statement ( "else" statement )? ;

block -> "begin" declaration* "end" ;

varDecl -> "var" IDENTIFIER ( "=" expression)? ";" ; #TODO: Seperate into WIRE and ASSIGN declaration
exprStmt -> expression ";" ;
printStmt -> 'print' expression ";" ;

expression -> assignment ;
assignment -> IDENTIFIER "=" assignment | logic_or ; #Variable reassignment
logic_or -> logic_xor ( '||' logic_xor )* ;
logic_xor -> logic_and ( "^^" logic_and )* ;
logic_and -> bit_or ( '&&' bit_or )* ;

bit_or -> bit_xor ( "|" bit_xor )* ;
bit_xor -> bit_and ( "^" bit_and )* ;
bit_and -> equality ( "&" equality )* ;

equality -> comparison ( ( "!=" | "==" ) comparision)* ;
comparison -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term -> factor ( ( "-" | "+" ) factor )* ;
factor -> unary ( ( "/" | "*" ) unary )* ;
unary -> ( "~" | "-" ) unary | primary ;
primary -> NUMBER | STRING | "true" | "false" | "null" | "(" expression ")" | IDENTIFIER;

